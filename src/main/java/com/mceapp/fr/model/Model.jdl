/**
 * Generated by JHipster IDE plugin
 */
application {
  config {
  	// add config properties here...
  }
}


/**
 * The Utilisateur entity.
 */
 
 entity Utilisateur{
	idUtilisateur Long required unique
 	nom String
 	prenom String
 	codeProfil Long 
 	loginUtilisateur String
 	passwordUtilisateur String
 	email String
 	numeroMobile Long
 	idProfil Long
}
/*
 * Table Profil: type des profil admin , user , super-user
 * {idProfi:01,typeProfil: Adminisitrateur, codeProfil: ADM, tokenProfil:1254AZERT!} 
 */
entity Profil{
	idProfil Long required unique
	typeProfile String
	codeProfil CodeProfil
	tokenProfil String
}
enum CodeProfil {
	ADMINISTRATEUR, USER, SUPERUTILISATEUR, GESTIONNAIRE
}
/*
 * Produit
 */
entity Produit{
	idProduit Long 
 	sexe String
 	vetements Vetements
 	accessoires Accessoires
 	prix Double
 	quantite Integer
 	stockMin Integer
 	 
}
enum Vetements {
	MAILLOT, TSHIRT, POLO, SUREVETEMENT, SHORT, PANTALLON, CHEMISE
}
enum Accessoires {
	CHAUSSETTES, CASQUETTE, ECHARPE
}
entity CommandeProduits{
	numCommande Long required unique
	idProduit Long
	idAbonne Long
	dateAchat ZonedDateTime
	dateLivraison ZonedDateTime
 	modePaiement ModePaiement
}
enum ModePaiement{
	ESPECE, CB, CHEQUE
}

/**
 * The Abonne entity.
 */
entity Abonne {
	idAbonne Long required unique 
	sexe String
	nom String
	prenom String
	email String
	numeroMobile Long
	idAdresse Long
	dateNaissance ZonedDateTime
	paysNaissance String
	faceBookAccount String
	idProfession Long
	stautAbonne Integer
	idAbonnement Long
	langue Language
	typeContrat Contrat
	modeNotification Notification
}
entity CompteBancaire{
	idCompteB Long required unique
	idAbonne Long
	iban TextBlob
	bic String
	codeBanque Integer
	codeGuichet Integer
	numCompte Long
	cle Instant
	domiciliation String
}
entity Profession {
	idProfession Long required unique
	intituleProfession String
	domaine Damaine
}
/*
 * Pays: {idPays: 001, nomPays: TUNISIE, libellePays: TUN}
 */
entity Pays {
	idPays Long required unique
	nomPays String
	libellePays String
}
/** not an ignored comment */
entity Adresse {
	idAdresse Long required unique
	libelleAdresse1 String required
	libetteAdresse2 String
	codePostal String required
	commune String required
	idPays Long required
}
enum Contrat {
	AUTRES, CHOMAGE, CDI, CDD, INTERIMAIRE
}
enum Damaine {
	ADMINISTRATION, ART,CULTURE, COMMUNICATION, CONSTRUCTION,BATIMENTS,MANUTENTIONS, DROIT, GESTION, TOURISME,RESTAURATION, INFORMATIQUE,SCIENCES, SANTE, PUBLIC, TRANSPORT, AUTRES
}
enum Notification{
	SMS, EMAIL
}
enum Language {
	FRANCAIS, ANGLAIS, ESPAGNOL, ITALIEN, ARABE
}


/*
 * 
 * Abonnement
 */
entity Abonnement{
	idAbonnement Long required unique
	categorie TypeAbonnement
	validite ZonedDateTime
}
enum TypeAbonnement {
	BRONZE, SILVER, GOLD, PREMIUM
}
/*
 * Table manage all transactions related to the subscription: validate, lock , unlock ... 
 */
entity HistoriqueInscription{
	idInscription Long required unique
	idAbonne Long required
	idUtilisateur Long required
	dateInscription ZonedDateTime
	dateActivation ZonedDateTime
	dateValidation ZonedDateTime
	action Action
	commentaire TextBlob
}
enum Action {
	ACTIVATION, SUSPEND, DESACTIVATION
}

/*
 * Evenements
 */
 
 entity Evenement{
 	idEvenement Long
 	dateEvenment ZonedDateTime
 	description String
 	commentaire String
 }
 entity ParticiperEvent{
 	idParticipation Long
 	idEvenement Long
 	idAbonne Long
  }

relationship OneToOne{
	Abonne{idAdresse} to Adresse , 
	Abonne{idProfession} to Profession , 
	Abonne{idAbonnement} to Abonnement , 
	Adresse{idPays} to Pays , 
	Utilisateur{idProfil} to Profil 
}
relationship OneToMany{
	CompteBancaire{idAbonne} to Abonne
	Abonne{idUtilisateur} to Utilisateur

}

relationship ManyToMany{
	CommandeProduits{idAbonne} to Abonne,
	CommandeProduits{idProduit} to Produit,
	ParticiperEvent{idEvenement} to Evenement,
	ParticiperEvent{idAbonne} to Abonne,
	HistoriqueInscription{idUtilisateur} to Utilisateur, 
	HistoriqueInscription{idAbonne} to Abonne
}
// Set pagination options

paginate Utilisateur,Profil,Produit, Abonne,CompteBancaire,Profession, Pays, Adresse,Abonnement,HistoriqueInscription, Evenement, ParticiperEvent with pagination
dto * with mapstruct
// Set service options to all except few
service all with serviceImpl
// Set an angular suffix

